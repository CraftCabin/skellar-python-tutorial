name: Python Mission Validator

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

jobs:
  validate-python-mission:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install pytest pytest-json-report
          
      - name: Extract mission from branch name
        id: mission
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          echo "Branch name: $BRANCH_NAME"
          
          # Extract mission name from branch pattern mission/m*-*
          if [[ $BRANCH_NAME =~ ^mission/(m[0-9]+-.+)$ ]]; then
            MISSION_NAME="${BASH_REMATCH[1]}"
            echo "mission_name=$MISSION_NAME" >> $GITHUB_OUTPUT
            echo "mission_path=missions/$MISSION_NAME" >> $GITHUB_OUTPUT
            echo "valid_mission=true" >> $GITHUB_OUTPUT
            echo "Detected mission: $MISSION_NAME"
          else
            echo "valid_mission=false" >> $GITHUB_OUTPUT
            echo "Branch name does not match mission pattern (mission/m*-*)"
          fi
          
      - name: Run mission-specific tests
        id: tests
        run: |
          MISSION_PATH="${{ steps.mission.outputs.mission_path }}"
          VALID_MISSION="${{ steps.mission.outputs.valid_mission }}"
          
          if [ "$VALID_MISSION" == "true" ]; then
            if [ -d "$MISSION_PATH" ]; then
              echo "Running tests for mission: $MISSION_PATH"
              # Run pytest only for the specific mission directory
              if pytest "$MISSION_PATH" --json-report --json-report-file=test-report.json -v; then
                echo "passed=true" >> $GITHUB_OUTPUT
                echo "exit_code=0" >> $GITHUB_OUTPUT
              else
                echo "passed=false" >> $GITHUB_OUTPUT
                echo "exit_code=$?" >> $GITHUB_OUTPUT
              fi
            else
              echo "Mission directory $MISSION_PATH not found"
              echo "passed=false" >> $GITHUB_OUTPUT
              echo "exit_code=1" >> $GITHUB_OUTPUT
            fi
          else
            echo "Invalid mission branch pattern. Skipping tests."
            echo "passed=false" >> $GITHUB_OUTPUT
            echo "exit_code=1" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true
 
      - name: Submit to Skellar
        id: submit
        run: |
          # Determine validation status - ALL conditions must pass
          tests_passed="${{ steps.tests.outputs.passed }}"
          valid_mission="${{ steps.mission.outputs.valid_mission }}"
          mission_name="${{ steps.mission.outputs.mission_name }}"
          
          # Check if validation criteria are met
          if [ "$tests_passed" == "true" ] && [ "$valid_mission" == "true" ]; then
            validation_passed="true"
            error_msg=""
          else
            validation_passed="false"
            error_msg=""
            [ "$tests_passed" == "false" ] && error_msg="Tests failed for mission $mission_name. "
            [ "$valid_mission" == "false" ] && error_msg="${error_msg}Invalid branch pattern - must follow mission/m*-* format. "
          fi
          
          # Submit to Skellar API
          curl -X POST "${{ vars.SKELLAR_API_HOST }}/api/v1/coding/validate-pr/" \
            -H "Authorization: Bearer ${{ secrets.SKELLAR_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "repository_owner": "${{ github.repository_owner }}",
              "repository_name": "${{ github.event.repository.name }}",
              "pull_request_number": ${{ github.event.pull_request.number }},
              "commit_sha": "${{ github.event.pull_request.head.sha }}",
              "github_username": "${{ github.event.pull_request.user.login }}",
              "learner_github_username": "${{ github.event.pull_request.user.login }}",
              "validation_passed": '$validation_passed',
              "mission_name": "'$mission_name'",
              "test_results": {
                "pytest_passed": '$tests_passed',
                "exit_code": ${{ steps.tests.outputs.exit_code }}
              },
              "branch_validation": {
                "valid_mission_branch": '$valid_mission',
                "mission_name": "'$mission_name'"
              },
              "error_message": "'$error_msg'"
            }' \
            --fail --show-error || echo "API call failed"
